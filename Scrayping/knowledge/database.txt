データベースにデータを保存
：ファイル保存と比べて、複数プロセスから読み書きしやい
：データの重複を防ぎやすくなります
：条件に合う一部のデータだけを取り出すのも簡単


リレーショナルデータベース
：リレーショナルモデルやトランザクションによってデータの整合性を保つ
：標準化されたSQL文によって柔軟にデータをクエリできる
：SQLite3（ファイルベース）
：MySQL（クライアント／サーバー型のリレーショナルデータベース）
：python database APIが基。同じように使える。

SQLite
：手軽に使えるリレーショナルデータベース
：ファイルの書き込みに時間がかかるという弱点
：ファイルへの書き込みがボトルネックになりえる
：ロックによって、複数プログラムからの同時書き込みにも向いていない
：この問題への対処法として、MySQLやMongoDBが使えます

MySQL
：様々なプログラミング言語から簡単に使用でき
：大規模でもスケールアウトによる性能向上が見込める
：SQL文による柔軟なクエリ
：データ同士の関連をうまく扱える
：rootユーザーのパスワードが空
：開発環境では問題ないものの実運用には向かない設定



NoSQL
：リレーショナルデータベース以外のデータベース
：データの整合性を弱める代わりにスケーラビリティや読み書きの性能が高い
：リレーショナルデータベースが向かない領域で利用が広がっています
：MongoDB（ドキュメント型），柔軟なデータ構造や使いやすさが特徴
：階層。データベース > コレクション > ドキュメント（BSON）

BSON
：Bynary JSON
：listやdictのような複雑なデータ構造を格納できる
：事前にデータ構造を定義する必要がない
：ドキュメントごとに異なる構造を持てる
：これはページによって掲載されているデータ項目が異なる場合に役立つ


一意なキー
：パーマリンクの一意な識別子を使用
：主キーには、サロゲートキーがオススメ
：URLとその識別子は、サーバー側の都合で変わるため

サロゲートキー（surrogate key）
：利用者や記録する対象とは直接関係のない人工的な値を用いること
：キーとして使うためだけに、重複も欠落もないことが保証される識別符号
：自然キーは、どの項目も主キーにふさわしくない場合も少なくない
：シリアル型やオートナンバー型